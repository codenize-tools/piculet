#!/usr/bin/env ruby
$: << File.expand_path("#{File.dirname __FILE__}/../lib")
require 'rubygems'
require 'piculet'
require 'optparse'

Version = Piculet::VERSION

mode = nil
file = 'Groupfile'
output_file = '-'
split = false
MAGIC_COMMENT = <<-EOS
# -*- mode: ruby -*-
# vi: set ft=ruby :
EOS

options = {
  :dry_run => false,
  :format  => :ruby,
  :color   => true,
  :debug   => false,
}

ARGV.options do |opt|
  begin
    access_key = nil
    secret_key = nil
    region = nil
    profile_name = nil
    credentials_path = nil
    format_passed = false

    opt.on('-p', '--profile PROFILE_NAME')          {|v| profile_name                 = v           }
    opt.on(''  , '--credentials-path PATH')         {|v| credentials_path             = v           }
    opt.on('-k', '--access-key ACCESS_KEY')         {|v| access_key                   = v           }
    opt.on('-s', '--secret-key SECRET_KEY')         {|v| secret_key                   = v           }
    opt.on('-r', '--region REGION')                 {|v| region                       = v           }
    opt.on('-a', '--apply')                         {|v| mode                         = :apply      }
    opt.on('-f', '--file FILE')                     {|v| file                         = v           }
    opt.on('-n', '--names SG_LIST', Array)          {|v| options[:sg_names]           = v           }
    opt.on('-x', '--exclude SG_LIST', Array)        {|v| options[:exclude_sgs]        = v           }
    opt.on('-t', '--exclude-tags TAGS_LIST', Array) {|v| options[:exclude_tags]       = v           }
    opt.on('',   '--ec2s VPC_IDS', Array)           {|v| options[:ec2s]               = v           }
    opt.on('',   '--dry-run')                       {|v| options[:dry_run]            = true        }
    opt.on('-e', '--export')                        {|v| mode                         = :export     }
    opt.on('-o', '--output FILE')                   {|v| output_file                  = v           }
    opt.on('',   '--split')                         {|v| split                        = true        }
    opt.on('',   '--split-more')                    {|v| split                        = :more       }
    opt.on('',   '--format=FORMAT', [:ruby, :json]) {|v| format_passed = true; options[:format] = v }
    opt.on(''  , '--no-color')                      {    options[:color]              = false       }
    opt.on(''  , '--debug')                         {    options[:debug]              = true        }
    opt.parse!

    credentials_path ||= ENV['AWS_CONFIG_FILE']
    profile_name     ||= ENV['AWS_DEFAULT_PROFILE'] || ENV['AWS_PROFILE']
    region           ||= ENV['AWS_DEFAULT_REGION']

    aws_opts = {}
    if access_key and secret_key
      aws_opts = {
        :access_key_id     => access_key,
        :secret_access_key => secret_key,
      }
    elsif profile_name or credentials_path
      credentials_opts = {}
      if credentials_path
        credentials_opts[:path] = credentials_path
        AWSConfig.credentials_file = credentials_path
      end
      if profile_name
        credentials_opts[:profile_name] = profile_name
        role_arn = AWSConfig[profile_name][:role_arn]
      end
      if role_arn
        session_name = "piculet-session-#{Time.now.to_i}"
        sts = AWS::STS.new(AWSConfig[profile_name].config_hash)
        provider = AWS::Core::CredentialProviders::AssumeRoleProvider.new(
          sts: sts,
          role_arn: role_arn,
          role_session_name: session_name
        )
      else
        provider = AWS::Core::CredentialProviders::SharedCredentialFileProvider.new(credentials_opts)
      end
      aws_opts[:credential_provider] = provider
    elsif (access_key and !secret_key) or (!access_key and secret_key) or mode.nil?
      puts opt.help
      exit 1
    end

    aws_opts[:region] = region if region
    AWS.config(aws_opts)

    # Remap groups to exclude to regular expressions (if they're surrounded by '/')
    if options[:exclude_sgs]
      options[:exclude_sgs].map! do |name|
        name =~ /\A\/(.*)\/\z/ ? Regexp.new($1) : Regexp.new('\A' + Regexp.escape(name) + '\z')
      end
    end

    if not format_passed and [file, output_file].any? {|i| i =~ /\.json\z/ }
      options[:format] = :json
    end
  rescue => e
    $stderr.puts("[ERROR] #{e.message}")
    exit 1
  end
end

String.colorize = options[:color]

if options[:debug]
  AWS.config({
    :http_wire_trace => true,
    :logger => Piculet::Logger.instance,
  })
end

begin
  logger = Piculet::Logger.instance
  logger.set_debug(options[:debug])
  client = Piculet::Client.new(options)

  case mode
  when :export
    if split
      logger.info('Export SecurityGroup')

      output_file = 'Groupfile' if output_file == '-'
      requires = []
      base_dir = File.dirname(output_file)

      client.export(options.merge(:without_convert => options[:format] != :ruby)) do |exported, converter|
        write_group_file = proc do |group_file, vpc, security_groups|
          if options[:format] == :json
            group_file << '.json'
          end

          requires << group_file

          logger.info("  write `#{group_file}`")
          FileUtils.mkdir_p(File.dirname(group_file))

          open(group_file, 'wb') do |f|
            if options[:format] == :json
              f.puts  JSON.pretty_generate(vpc => security_groups)
            else
              f.puts MAGIC_COMMENT
              f.puts converter.call(vpc => security_groups)
            end
          end
        end

        exported.each do |vpc, security_groups|
          if split == :more
            security_groups.each do |sg_id, sg_attrs|
              sg_name = sg_attrs.fetch(:name)
              group_file = File.join(base_dir, vpc || 'classic', "#{sg_name}.group")
              write_group_file.call(group_file, vpc, sg_id => sg_attrs)
            end
          else
            group_file = File.join(base_dir, "#{vpc || :classic}.group")
            write_group_file.call(group_file, vpc, security_groups)
          end
        end
      end

      if options[:format] == :ruby
        logger.info("  write `#{output_file}`")

        open(output_file, 'wb') do |f|
          f.puts MAGIC_COMMENT

          requires.each do |group_file|
            group_file.sub!(%r|\A#{Regexp.escape base_dir}/?|, '')
            f.puts "require '#{group_file}'"
          end
        end
      end
    else
      exported = client.export(options.merge(:without_convert => options[:format] != :ruby))

      if options[:format] == :json
        exported = JSON.pretty_generate(exported)
      end

      if output_file == '-'
        logger.info('# Export SecurityGroup') if options[:format] == :ruby
        puts exported
      else
        logger.info("Export SecurityGroup to `#{output_file}`")

        open(output_file, 'wb') do |f|
          f.puts MAGIC_COMMENT if options[:format] == :ruby
          f.puts exported
        end
      end
    end
  when :apply
    unless File.exist?(file)
      raise "No Groupfile found (looking for: #{file})"
    end

    msg = "Apply `#{file}` to SecurityGroup"
    msg << ' (dry-run)' if options[:dry_run]
    logger.info(msg)

    updated = client.apply(file)

    logger.info('No change'.intense_blue) unless updated
  else
    raise 'must not happen'
  end
rescue => e
  if options[:debug]
    raise e
  else
    $stderr.puts("[ERROR] #{e.message}".red)
    exit 1
  end
end
